---
- name: Create Vagrant Cloud box version {{ build_version }}
  when:
  - create
  - current_box_version is version(build_version, '<')
  uri:
    url: "https://app.vagrantup.com/api/v2/box/{{ vagrant_cloud_user }}/{{ vagrant_box }}/versions"
    method: POST
    body_format: json
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vagrant_cloud_token }}"
    body: "{{ data }}"
  vars:
    data:
      version:
        version: "{{ build_version }}"
        description: "{{ lookup('template', 'description.md.j2') }}"
  register: create_version
  changed_when: create_version.status == 200
  failed_when:
  - create_version.status != 200
  - create_version.status != 422

- name: Updating Vagrant Cloud box version {{ build_version }}
  when:
  - update
  - current_box_version is version(build_version, '=')
  - create_version is skipped
  uri:
    url: "https://app.vagrantup.com/api/v2/box/{{ vagrant_cloud_user }}/{{ vagrant_box }}/version/{{ build_version }}"
    method: PUT
    body_format: json
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vagrant_cloud_token }}"
    body: "{{ data }}"
  vars:
    data:
      version:
        description: "{{ lookup('template', 'description.md.j2') }}"

- name: Download {{ file_url }}
  get_url:
    url: "{{ file_url }}"
    dest: "{{ disk_path }}"
    # FIXME: what about checksum with GPG?
    checksum: "{{ checksum|default(omit) }}"
  vars:
    ansible_remote_tmp: "{{ build_path }}"

- name: Convert disk image
  when: distro.disk_format != box_format
  command: qemu-img convert -f "{{ distro.disk_format }}" -O "{{ box_format }}" "{{ disk_path }}" "{{ box_path }}"
  register: qemu_convert

- name: Copy disk image
  when: distro.disk_format == box_format
  copy:
    src: "{{ disk_path }}"
    dest: "{{ box_path }}"

- name: Resize disk image
  command: qemu-img resize "{{ box_path }}" "{{ box_size }}"

- name: Execute as root...
  when: not dryrun
  become: true
  block:
  - name: Create temporary mount directory
    tempfile:
      state: directory
    register: tmp_mount

  - name: Mount disk image
    command: guestmount -a "{{ box_path }}" -i --rw "{{ tmp_mount.path }}"

  - name: Inject Vagrant cloud-init configuration file
    template:
      src: "99_vagrant.cfg.j2"
      dest: "{{ tmp_mount.path }}/etc/cloud/cloud.cfg.d/99_vagrant.cfg"
      owner: root
      group: root
      mode: '0644'

  - name: Unmount disk image
    command: umount "{{ tmp_mount.path }}"

  - name: Remove temporary mount directory
    file:
      path: "{{ tmp_mount.pathÂ }}"
      state: absent

- name: Populate box files
  template:
    src: "{{ item }}.j2"
    dest: "{{ build_path }}/{{ item }}"
  with_items:
    - Vagrantfile
    - metadata.json

- name: Create box archive
  command: tar cvzf "{{ vagrant_box_file }}" Vagrantfile metadata.json box.img
  args:
    chdir: "{{ build_path }}"
    creates: "{{ vagrant_box_path }}"

- name: Remove box files
  file:
    path: "{{ build_path }}/{{ item }}"
    state: absent
  with_items:
    - Vagrantfile
    - metadata.json
    - box.img

- name: Calculate MD5 checksum
  when: create
  stat:
    path: "{{ vagrant_box_path }}"
    checksum_algorithm: md5
  register:
    box_checksum

- name: Create Vagrant Cloud {{ provider }} provider
  when: create
  uri:
    url: "https://app.vagrantup.com/api/v2/box/{{ vagrant_cloud_user }}/{{ vagrant_box }}/version/{{ build_version }}/providers"
    method: POST
    body_format: json
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vagrant_cloud_token }}"
    body: "{{ data }}"
  vars:
    data:
      provider:
        checksum: "{{ box_checksum.stat.checksum }}"
        checksum_type: md5
        name: "{{ provider }}"
        architecture: "{{ arch.name }}"
        default_architecture: "{{ (arch.name == 'amd64')|ternary('true', 'false') }}"

- name: Get Vagrant Cloud object store URL
  when: upload
  uri:
    url: "https://app.vagrantup.com/api/v2/box/{{ vagrant_cloud_user }}/{{ vagrant_box }}/version/{{ build_version }}/provider/{{ provider }}/{{ arch.name }}/upload"
    return_content: true
    method: GET
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vagrant_cloud_token }}"
  register: object_store

- name: Upload Vagrant cloud box
  when: upload
  uri:
    url: "{{ object_store.json.upload_path }}"
    method: PUT
    src: "{{ vagrant_box_path }}"

- name: Cleanup temporary files
  when: not preserve
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ disk_path }}"
    - "{{ vagrant_box_path }}"

- name: Release Vagrant box version {{ build_version }}
  when:
  - create
  - current_box_version is version(build_version, '<')
  uri:
    url: "https://app.vagrantup.com/api/v2/box/{{ vagrant_cloud_user }}/{{ vagrant_box }}/version/{{ build_version }}/release"
    method: PUT
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vagrant_cloud_token }}"

- set_fact:
    current_box_version: "{{ build_version }}"
