---
- name: Define artifacts location for {{ distro.name }}-{{ release.version }}-{{ arch_name }}
  set_fact:
    disk_path: "{{ build_path }}/{{ distro_name }}-{{ release_version }}-{{ arch_name }}.qcow2"
    box_img_path: "{{ build_path }}/box.img"
    box_file: "{{ distro_name }}-{{ release_version }}-{{ current_build_version }}-{{ arch_name }}.box"

- name: Create temporary mount directory
  tempfile:
    state: directory
  register: tmp_mount

- name: Download {{ file_url }}
  get_url:
    url: "{{ file_url }}"
    dest: "{{ disk_path }}"
    # FIXME: what about checksum with GPG?
    checksum: "{{ checksum|default(omit) }}"
  vars:
    ansible_remote_tmp: "{{ build_path }}"

- name: Crete e copy of original disk image
  copy:
    src: "{{ disk_path }}"
    dest: "{{ box_img_path }}"

- name: Execute as root...
  become: true
  block:
  - name: Mount disk image
    command: guestmount -a "{{ box_img_path }}" -i --rw "{{ tmp_mount.path }}"

  - name: Inject Vagrant cloud-inig configuration file
    template:
      src: "99_vagrant.cfg.j2"
      dest: "{{ tmp_mount.path }}/etc/cloud/cloud.cfg.d/99_vagrant.cfg"
      owner: root
      group: root
      mode: '0644'
  
  - name: Unmount disk image
    command: umount "{{ tmp_mount.path }}"

- name: Populate box files
  template:
    src: "{{ item }}.j2"
    dest: "{{ build_path }}/{{ item }}"
  with_items:
    - Vagrantfile
    - metadata.json
    - vagrant.pkr.hcl

- name: Create box archive
  command: tar cvzf "{{ box_file }}" Vagrantfile metadata.json box.img
  args:
    chdir: "{{ build_path }}"

- name: Calculate MD5 checksum
  stat:
    path: "{{ build_path }}/{{ box_file }}"
    checksum_algorithm: md5
  register:
    box_checksum

- name: Create Vagrant Cloud libvirt provider 
  uri:
    url: "https://app.vagrantup.com/api/v2/box/{{ vagrant_cloud_user }}/{{ vagrant_box }}/version/{{ current_build_version }}/providers"
    method: POST
    body_format: json
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vagrant_cloud_token }}"
    body: "{{ data }}"
  vars:
    data:
      provider:
        checksum: "{{ box_checksum.stat.checksum }}"
        checksum_type: md5
        name: libvirt
        architecture: "{{ arch_name }}"
        default_architecture: "{{ (arch_name == 'amd64')|ternary('true', 'false') }}"

- name: Get Vagrant Cloud object store URL
  uri:
    url: "https://app.vagrantup.com/api/v2/box/{{ vagrant_cloud_user }}/{{ vagrant_box }}/version/{{ current_build_version }}/provider/libvirt/{{ arch_name }}/upload"
    return_content: true
    method: GET
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vagrant_cloud_token }}"
  register: object_store

- name: Upload Vagrant cloud box
  uri:
    url: "{{ object_store.json.upload_path }}"
    method: PUT
    src: "{{ build_path }}/{{ box_file }}"

- name: Cleanup temporary files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ tmp_mount.pathÂ }}"
    - "{{ disk_path }}"
    - "{{ box_img_path }}"
    - "{{ build_path }}/Vagrantfile"
    - "{{ build_path }}/metadata.json"
    - "{{ build_path }}/vagrant.pkr.hcl"
